

from datetime import datetime, timedelta
import logging
import asyncio
from student_schedule_data import student_schedule
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
BOT_TOKEN = '5942243404:AAFduulHWieMebGvVI1T_Ygauz7EJn1dQXI'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())


def get_today_schedule(schedule_data):
    today = datetime.now().strftime("%Y-%m-%d")

    if "–í—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è" in schedule_data:
        week_schedule = schedule_data["–í—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è"]
        for day, day_schedule in week_schedule.items():
            if today in day_schedule:
                return day_schedule[today]

    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def send_schedule(chat_id):
    today_schedule = get_today_schedule(student_schedule)
    if today_schedule:
        msg = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
        for para, para_data in today_schedule.items():
            # msg += f"<u>–ü–∞—Ä–∞ {para}:</u>\n"
            msg += f"<i>–í—Ä–µ–º—è:</i> {para_data['–í—Ä–µ–º—è']}\n" \
                   f"<i>–ü—Ä–µ–¥–º–µ—Ç:</i> {para_data['–ü—Ä–µ–¥–º–µ—Ç']}\n" \
                   f"<i>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</i> {para_data['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n" \
                   f"<i>–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:</i> {para_data['–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è']}\n" \
                   f"<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i> {para_data['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']}\n\n"
        await bot.send_message(chat_id, msg, parse_mode='HTML')
    else:
        await bot.send_message(chat_id, "–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥
def format_date(date_str):
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    return date_obj.strftime("%d.%m.%Y")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply(
        '<b>–ü—Ä–∏–≤–µ—Ç!</b>\n–Ø –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. \n–ù–∞–∂–º–∏:\n<code>/schedule</code> –∏ –ø–æ–ª—É—á–∏ '
        '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å\n<code>/week_schedule</code> –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é. üòä',
        parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /schedule
@dp.message_handler(commands=['schedule'])
async def get_schedule(message: types.Message):
    chat_id = message.chat.id
    await send_schedule(chat_id)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /week_schedule
@dp.message_handler(commands=['week_schedule'])
async def get_week_schedule(message: types.Message):
    chat_id = message.chat.id
    week_schedule = await get_week_schedule(student_schedule)

    if week_schedule:
        msg = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:</b>\n\n"
        for day, day_schedule in week_schedule.items():
            msg += f"<u>{day}:</u>\n"
            for date, para_data in day_schedule.items():
                formatted_date = format_date(date)
                msg += f"<i>–î–∞—Ç–∞:</i> {formatted_date}\n"
                for para, details in para_data.items():
                    # msg += f"<i>–ü–∞—Ä–∞ {para}:</i>\n"
                    msg += f"<i>–í—Ä–µ–º—è:</i> {details['–í—Ä–µ–º—è']}\n"
                    msg += f"<i>–ü—Ä–µ–¥–º–µ—Ç:</i> {details['–ü—Ä–µ–¥–º–µ—Ç']}\n"
                    msg += f"<i>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</i> {details['–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å']}\n"
                    msg += f"<i>–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è:</i> {details['–§–æ—Ä–º–∞—Ç –æ–±—É—á–µ–Ω–∏—è']}\n"
                    msg += f"<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</i> <u>{details['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è']}</u>\n\n"

        await bot.send_message(chat_id, msg, parse_mode='HTML')
    else:
        await bot.send_message(chat_id, "–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
async def get_week_schedule(schedule_data):
    today = datetime.now().strftime("%Y-%m-%d")

    if "–í—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è" in schedule_data:
        week_schedule = schedule_data["–í—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è"]
        return week_schedule  # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é

    return None


if __name__ == '__main__':
    from aiogram import executor

    loop = asyncio.get_event_loop()
    executor.start_polling(dp, skip_updates=True)
